//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

@Injectable()
export class AdoptersApi {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    adopters(body?: CreateAdopterRequest | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/internal/Adopters";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAdopters(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAdopters(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processAdopters(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

@Injectable()
export class AuthCheckApi {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * @return OK
     */
    status(): Observable<void> {
        let url_ = this.baseUrl + "/api/AuthCheck/status";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processStatus(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processStatus(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processStatus(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    adopterOnly(): Observable<void> {
        let url_ = this.baseUrl + "/api/AuthCheck/adopter-only";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAdopterOnly(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAdopterOnly(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processAdopterOnly(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    logout(): Observable<void> {
        let url_ = this.baseUrl + "/api/AuthCheck/logout";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processLogout(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processLogout(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processLogout(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

@Injectable()
export class PetSearchApi {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    search(body?: PetSearchRequest | undefined): Observable<PetSearchResponse> {
        let url_ = this.baseUrl + "/api/PetSearch/search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSearch(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSearch(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<PetSearchResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<PetSearchResponse>;
        }));
    }

    protected processSearch(response: HttpResponseBase): Observable<PetSearchResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PetSearchResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

@Injectable()
export class SpeciesApi {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * @return OK
     */
    species(): Observable<GetPetSpeciesResponse> {
        let url_ = this.baseUrl + "/api/Species";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSpecies(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSpecies(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<GetPetSpeciesResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<GetPetSpeciesResponse>;
        }));
    }

    protected processSpecies(response: HttpResponseBase): Observable<GetPetSpeciesResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetPetSpeciesResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    breeds(speciesId: number): Observable<GetPetBreedsResponse> {
        let url_ = this.baseUrl + "/api/Species/{speciesId}/breeds";
        if (speciesId === undefined || speciesId === null)
            throw new Error("The parameter 'speciesId' must be defined.");
        url_ = url_.replace("{speciesId}", encodeURIComponent("" + speciesId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processBreeds(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processBreeds(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<GetPetBreedsResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<GetPetBreedsResponse>;
        }));
    }

    protected processBreeds(response: HttpResponseBase): Observable<GetPetBreedsResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetPetBreedsResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export class CreateAdopterRequest implements ICreateAdopterRequest {
    userId!: string | undefined;
    fullName!: string | undefined;

    constructor(data?: ICreateAdopterRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userId = _data["userId"];
            this.fullName = _data["fullName"];
        }
    }

    static fromJS(data: any): CreateAdopterRequest {
        data = typeof data === 'object' ? data : {};
        let result = new CreateAdopterRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["fullName"] = this.fullName;
        return data;
    }
}

export interface ICreateAdopterRequest {
    userId: string | undefined;
    fullName: string | undefined;
}

export class GetPetBreedsResponse implements IGetPetBreedsResponse {
    success?: boolean;
    breeds?: PetBreedDto[] | undefined;
    errorMessage?: string | undefined;

    constructor(data?: IGetPetBreedsResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            if (Array.isArray(_data["breeds"])) {
                this.breeds = [] as any;
                for (let item of _data["breeds"])
                    this.breeds!.push(PetBreedDto.fromJS(item));
            }
            this.errorMessage = _data["errorMessage"];
        }
    }

    static fromJS(data: any): GetPetBreedsResponse {
        data = typeof data === 'object' ? data : {};
        let result = new GetPetBreedsResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        if (Array.isArray(this.breeds)) {
            data["breeds"] = [];
            for (let item of this.breeds)
                data["breeds"].push(item ? item.toJSON() : <any>undefined);
        }
        data["errorMessage"] = this.errorMessage;
        return data;
    }
}

export interface IGetPetBreedsResponse {
    success?: boolean;
    breeds?: PetBreedDto[] | undefined;
    errorMessage?: string | undefined;
}

export class GetPetSpeciesResponse implements IGetPetSpeciesResponse {
    success?: boolean;
    species?: PetSpeciesDto[] | undefined;
    errorMessage?: string | undefined;

    constructor(data?: IGetPetSpeciesResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            if (Array.isArray(_data["species"])) {
                this.species = [] as any;
                for (let item of _data["species"])
                    this.species!.push(PetSpeciesDto.fromJS(item));
            }
            this.errorMessage = _data["errorMessage"];
        }
    }

    static fromJS(data: any): GetPetSpeciesResponse {
        data = typeof data === 'object' ? data : {};
        let result = new GetPetSpeciesResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        if (Array.isArray(this.species)) {
            data["species"] = [];
            for (let item of this.species)
                data["species"].push(item ? item.toJSON() : <any>undefined);
        }
        data["errorMessage"] = this.errorMessage;
        return data;
    }
}

export interface IGetPetSpeciesResponse {
    success?: boolean;
    species?: PetSpeciesDto[] | undefined;
    errorMessage?: string | undefined;
}

export class PetBreedDto implements IPetBreedDto {
    breedId?: number;
    name?: string | undefined;
    speciesId?: number;

    constructor(data?: IPetBreedDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.breedId = _data["breedId"];
            this.name = _data["name"];
            this.speciesId = _data["speciesId"];
        }
    }

    static fromJS(data: any): PetBreedDto {
        data = typeof data === 'object' ? data : {};
        let result = new PetBreedDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["breedId"] = this.breedId;
        data["name"] = this.name;
        data["speciesId"] = this.speciesId;
        return data;
    }
}

export interface IPetBreedDto {
    breedId?: number;
    name?: string | undefined;
    speciesId?: number;
}

export class PetSearchRequest implements IPetSearchRequest {
    latitude?: number;
    longitude?: number;
    maxDistanceKm?: number;
    speciesId?: number | undefined;
    breedId?: number | undefined;
    pageSize?: number;
    nextToken?: string | undefined;

    constructor(data?: IPetSearchRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.latitude = _data["latitude"];
            this.longitude = _data["longitude"];
            this.maxDistanceKm = _data["maxDistanceKm"];
            this.speciesId = _data["speciesId"];
            this.breedId = _data["breedId"];
            this.pageSize = _data["pageSize"];
            this.nextToken = _data["nextToken"];
        }
    }

    static fromJS(data: any): PetSearchRequest {
        data = typeof data === 'object' ? data : {};
        let result = new PetSearchRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["latitude"] = this.latitude;
        data["longitude"] = this.longitude;
        data["maxDistanceKm"] = this.maxDistanceKm;
        data["speciesId"] = this.speciesId;
        data["breedId"] = this.breedId;
        data["pageSize"] = this.pageSize;
        data["nextToken"] = this.nextToken;
        return data;
    }
}

export interface IPetSearchRequest {
    latitude?: number;
    longitude?: number;
    maxDistanceKm?: number;
    speciesId?: number | undefined;
    breedId?: number | undefined;
    pageSize?: number;
    nextToken?: string | undefined;
}

export class PetSearchResponse implements IPetSearchResponse {
    success?: boolean;
    pets?: PetSearchResultDto[] | undefined;
    totalCount?: number;
    nextToken?: string | undefined;
    errorMessage?: string | undefined;

    constructor(data?: IPetSearchResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            if (Array.isArray(_data["pets"])) {
                this.pets = [] as any;
                for (let item of _data["pets"])
                    this.pets!.push(PetSearchResultDto.fromJS(item));
            }
            this.totalCount = _data["totalCount"];
            this.nextToken = _data["nextToken"];
            this.errorMessage = _data["errorMessage"];
        }
    }

    static fromJS(data: any): PetSearchResponse {
        data = typeof data === 'object' ? data : {};
        let result = new PetSearchResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        if (Array.isArray(this.pets)) {
            data["pets"] = [];
            for (let item of this.pets)
                data["pets"].push(item ? item.toJSON() : <any>undefined);
        }
        data["totalCount"] = this.totalCount;
        data["nextToken"] = this.nextToken;
        data["errorMessage"] = this.errorMessage;
        return data;
    }
}

export interface IPetSearchResponse {
    success?: boolean;
    pets?: PetSearchResultDto[] | undefined;
    totalCount?: number;
    nextToken?: string | undefined;
    errorMessage?: string | undefined;
}

export class PetSearchResultDto implements IPetSearchResultDto {
    petPostgreSqlId?: number;
    name?: string | undefined;
    species?: string | undefined;
    breed?: string | undefined;
    ageInMonths?: number | undefined;
    gender?: string | undefined;
    description?: string | undefined;
    adoptionFee?: number | undefined;
    mainImageFileExtension?: string | undefined;
    mainImageDownloadUrl?: string | undefined;
    shelter?: PetSearchShelterDto;
    distanceKm?: number;

    constructor(data?: IPetSearchResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.petPostgreSqlId = _data["petPostgreSqlId"];
            this.name = _data["name"];
            this.species = _data["species"];
            this.breed = _data["breed"];
            this.ageInMonths = _data["ageInMonths"];
            this.gender = _data["gender"];
            this.description = _data["description"];
            this.adoptionFee = _data["adoptionFee"];
            this.mainImageFileExtension = _data["mainImageFileExtension"];
            this.mainImageDownloadUrl = _data["mainImageDownloadUrl"];
            this.shelter = _data["shelter"] ? PetSearchShelterDto.fromJS(_data["shelter"]) : <any>undefined;
            this.distanceKm = _data["distanceKm"];
        }
    }

    static fromJS(data: any): PetSearchResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new PetSearchResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["petPostgreSqlId"] = this.petPostgreSqlId;
        data["name"] = this.name;
        data["species"] = this.species;
        data["breed"] = this.breed;
        data["ageInMonths"] = this.ageInMonths;
        data["gender"] = this.gender;
        data["description"] = this.description;
        data["adoptionFee"] = this.adoptionFee;
        data["mainImageFileExtension"] = this.mainImageFileExtension;
        data["mainImageDownloadUrl"] = this.mainImageDownloadUrl;
        data["shelter"] = this.shelter ? this.shelter.toJSON() : <any>undefined;
        data["distanceKm"] = this.distanceKm;
        return data;
    }
}

export interface IPetSearchResultDto {
    petPostgreSqlId?: number;
    name?: string | undefined;
    species?: string | undefined;
    breed?: string | undefined;
    ageInMonths?: number | undefined;
    gender?: string | undefined;
    description?: string | undefined;
    adoptionFee?: number | undefined;
    mainImageFileExtension?: string | undefined;
    mainImageDownloadUrl?: string | undefined;
    shelter?: PetSearchShelterDto;
    distanceKm?: number;
}

export class PetSearchShelterDto implements IPetSearchShelterDto {
    shelterId?: string;
    shelterName?: string | undefined;
    shelterAddress?: string | undefined;
    shelterContactNumber?: string | undefined;
    shelterLatitude?: number | undefined;
    shelterLongitude?: number | undefined;

    constructor(data?: IPetSearchShelterDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.shelterId = _data["shelterId"];
            this.shelterName = _data["shelterName"];
            this.shelterAddress = _data["shelterAddress"];
            this.shelterContactNumber = _data["shelterContactNumber"];
            this.shelterLatitude = _data["shelterLatitude"];
            this.shelterLongitude = _data["shelterLongitude"];
        }
    }

    static fromJS(data: any): PetSearchShelterDto {
        data = typeof data === 'object' ? data : {};
        let result = new PetSearchShelterDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["shelterId"] = this.shelterId;
        data["shelterName"] = this.shelterName;
        data["shelterAddress"] = this.shelterAddress;
        data["shelterContactNumber"] = this.shelterContactNumber;
        data["shelterLatitude"] = this.shelterLatitude;
        data["shelterLongitude"] = this.shelterLongitude;
        return data;
    }
}

export interface IPetSearchShelterDto {
    shelterId?: string;
    shelterName?: string | undefined;
    shelterAddress?: string | undefined;
    shelterContactNumber?: string | undefined;
    shelterLatitude?: number | undefined;
    shelterLongitude?: number | undefined;
}

export class PetSpeciesDto implements IPetSpeciesDto {
    speciesId?: number;
    name?: string | undefined;

    constructor(data?: IPetSpeciesDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.speciesId = _data["speciesId"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): PetSpeciesDto {
        data = typeof data === 'object' ? data : {};
        let result = new PetSpeciesDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["speciesId"] = this.speciesId;
        data["name"] = this.name;
        return data;
    }
}

export interface IPetSpeciesDto {
    speciesId?: number;
    name?: string | undefined;
}

export class ApiException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((event.target as any).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}